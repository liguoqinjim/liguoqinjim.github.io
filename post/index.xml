<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Liguoqinjim&#39;s Blog</title>
    <link>https://liguoqinjim.com/post/</link>
    <description>Recent content in Posts on Liguoqinjim&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Wed, 20 Feb 2019 12:30:26 +0800</lastBuildDate>
    
	<atom:link href="https://liguoqinjim.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JetBrains项目的gitignore</title>
      <link>https://liguoqinjim.com/post/git/jetbrains%E9%A1%B9%E7%9B%AE%E7%9A%84gitignore/</link>
      <pubDate>Wed, 20 Feb 2019 12:30:26 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/git/jetbrains%E9%A1%B9%E7%9B%AE%E7%9A%84gitignore/</guid>
      <description>&lt;p&gt;JetBrains项目使用的gitignore&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HBase的基本配置</title>
      <link>https://liguoqinjim.com/post/bigdata/hbase%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 12 Feb 2019 15:57:17 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/bigdata/hbase%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;HBase的基本配置&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HDFS的基本配置</title>
      <link>https://liguoqinjim.com/post/bigdata/hdfs%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 12 Feb 2019 15:30:38 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/bigdata/hdfs%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;HDFS的基本配置&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用docker部署gogs</title>
      <link>https://liguoqinjim.com/post/tool/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2gogs/</link>
      <pubDate>Mon, 31 Dec 2018 21:44:33 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/tool/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2gogs/</guid>
      <description>&lt;p&gt;使用docker部署gogs&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>判断两个文件是否相同</title>
      <link>https://liguoqinjim.com/post/tool/%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/</link>
      <pubDate>Wed, 17 Oct 2018 10:17:38 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/tool/%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/</guid>
      <description>&lt;p&gt;有时我们需要判断两个文件是否相同，比如定时分析的软件，我们可以先判断数据有没有变，数据没变的话，本次定时就不运行了。这个时候就需要用到判断两个文件是否相同。&lt;br /&gt;
有两种方法来实现。&lt;/p&gt;

&lt;!-- toc --&gt;</description>
    </item>
    
    <item>
      <title>Git免密码</title>
      <link>https://liguoqinjim.com/post/tool/git%E5%85%8D%E5%AF%86%E7%A0%81/</link>
      <pubDate>Mon, 15 Oct 2018 22:43:17 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/tool/git%E5%85%8D%E5%AF%86%E7%A0%81/</guid>
      <description>&lt;p&gt;git提交的时候不用输入密码&lt;/p&gt;

&lt;!-- toc --&gt;</description>
    </item>
    
    <item>
      <title>Vagrant入门</title>
      <link>https://liguoqinjim.com/post/tool/vagrant%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 02 Sep 2018 14:07:36 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/tool/vagrant%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation, Vagrant lowers development environment setup time, increases production parity, and makes the &amp;ldquo;works on my machine&amp;rdquo; excuse a relic of the past.&lt;br /&gt;
Vagrant是一个在单一工作流中创建和管理虚拟机环境的工具。通过简单易用的工作流和对自动化的关注，Vagrant可以减少开发环境的配置时间，增加生产平价，并且使得&amp;rdquo;works on my machine&amp;rdquo;这个借口成为过去。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(八)|容器的的运维和监控</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E5%85%AB/</link>
      <pubDate>Thu, 30 Aug 2018 22:18:05 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E5%85%AB/</guid>
      <description>&lt;p&gt;容器的的运维和监控，是课程第十章的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(七)|容器编排Kubernetes</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%B8%83/</link>
      <pubDate>Thu, 30 Aug 2018 15:28:22 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%B8%83/</guid>
      <description>&lt;p&gt;容器编排Kubernetes，是课程第九章的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(六)|容器编排Docker Swarm</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E5%85%AD/</link>
      <pubDate>Wed, 29 Aug 2018 17:40:55 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E5%85%AD/</guid>
      <description>&lt;p&gt;容器编排Docker Swarm，是课程第七章的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(五)|Docker Compose多容器部署</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%BA%94/</link>
      <pubDate>Wed, 29 Aug 2018 15:24:16 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%BA%94/</guid>
      <description>&lt;p&gt;Docker Compose多容器部署，是课程第六章的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(四)|Docker的持久化存储和数据共享</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E5%9B%9B/</link>
      <pubDate>Wed, 29 Aug 2018 14:30:38 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E5%9B%9B/</guid>
      <description>&lt;p&gt;Docker的持久化存储和数据共享，是课程第五章的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(三)|Docker的网络</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%B8%89/</link>
      <pubDate>Tue, 28 Aug 2018 17:25:59 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%B8%89/</guid>
      <description>&lt;p&gt;Docker的网络，是课程第四章的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(二)|Docker的镜像和容器</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <pubDate>Tue, 28 Aug 2018 13:36:04 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <description>&lt;p&gt;Docker的镜像和容器，是课程第三章的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>系统学习Docker 践行DevOps理念 笔记(一)|Docker的安装</title>
      <link>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <pubDate>Tue, 28 Aug 2018 11:50:22 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/docker/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0docker-%E8%B7%B5%E8%A1%8Cdevops%E7%90%86%E5%BF%B5-%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <description>&lt;p&gt;Docker的安装&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LeetCode-0008-String to Integer (atoi)</title>
      <link>https://liguoqinjim.com/post/leetcode/lab0008/</link>
      <pubDate>Tue, 24 Jul 2018 11:46:25 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/leetcode/lab0008/</guid>
      <description>题目 Implement atoi which converts a string to an integer.
就是字符串转换为数字，但是还是有一些特殊的规则，具体看题目描述页
解法 解法1 func myAtoi(str string) int { if len(str) == 0 { return 0 } result := 0 u := -1 //有无符号 	e := -1 //错误位第几位 	for n, v := range str { if v &amp;lt; 48 || v &amp;gt; 57 { if v == 43 || v == 45 { //+-号 	if result != 0 { e = n break } if u &amp;gt;= 0 { return 0 } u = n continue } if v == 32 { //空格 	if result !</description>
    </item>
    
    <item>
      <title>LeetCode-0020-Valid Parentheses</title>
      <link>https://liguoqinjim.com/post/leetcode/lab0020/</link>
      <pubDate>Mon, 23 Jul 2018 14:01:09 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/leetcode/lab0020/</guid>
      <description>题目 Given a string containing just the characters &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, &amp;lsquo;}&amp;rsquo;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;, determine if the input string is valid.
An input string is valid if:
 Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.  Note that an empty string is also considered valid.
就是要判断括号的顺序是否是正确的。
解法 解法1 func isValid(s string) bool { //这个解法用到了acsii值 	if len(s) == 0 { return true } left := make([]int, 1) left[0] = int(s[0]) for i := 1; i &amp;lt; len(s); i++ { a := int(s[i]) if len(left) == 0 { left = append(left, a) continue } if a-left[len(left)-1] !</description>
    </item>
    
    <item>
      <title>LeetCode-0014-Longest Common Prefix</title>
      <link>https://liguoqinjim.com/post/leetcode/lab0014/</link>
      <pubDate>Sun, 22 Jul 2018 15:07:56 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/leetcode/lab0014/</guid>
      <description>题目 Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string &amp;ldquo;&amp;rdquo;.
在一组给出的字符串里面，找出最长的相同前缀。如果没有相同的前缀，返回&amp;rdquo;&amp;rdquo;
解法 解法1 func longestCommonPrefix(strs []string) string { if len(strs) == 0 { return &amp;#34;&amp;#34; } if len(strs) == 1 { return strs[0] } n := 0 end := false for !end { for i := 0; i &amp;lt; len(strs)-1; i++ { if n == len(strs[i]) || n == len(strs[i+1]) { end = true break } if strs[i][n] !</description>
    </item>
    
    <item>
      <title>LeetCode-0035-Search Insert Position</title>
      <link>https://liguoqinjim.com/post/leetcode/lab0035/</link>
      <pubDate>Sat, 21 Jul 2018 23:56:08 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/leetcode/lab0035/</guid>
      <description>题目 Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
就是有一组有序的数组和一个目标数字，如果目标数字存在在数组里面，就返回数组下标。如果不存在，则返回把目标数字按大小排列在数组里面的下标。
解法 解法1 func searchInsert(nums []int, target int) int { for n, v := range nums { if target &amp;lt;= v { return n } } return len(nums) } 解法2 func searchInsert2(nums []int, target int) int { low, high := 0, len(nums)-1 for low &amp;lt;= high { mid := (low + high) / 2 if nums[mid] == target { return mid } else if nums[mid] &amp;gt; target { high = mid - 1 } else { low = mid + 1 } } return low } 总结  解法2用到了二分法，时间复杂度是logn。在计算时间复杂度的时候，可以把high认为是一个常数，那么只有low在变化。  源代码 https://github.</description>
    </item>
    
    <item>
      <title>LeetCode-0007-Reverse Integer</title>
      <link>https://liguoqinjim.com/post/leetcode/lab0007/</link>
      <pubDate>Fri, 20 Jul 2018 14:10:48 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/leetcode/lab0007/</guid>
      <description>题目 Given a 32-bit signed integer, reverse digits of an integer.
也就是要反转一个数字，比如123变成321、-123变成-321。但是有一个要注意的地方，数字一定要在32位的有符号数字范围内，要是不在范围内的话，返回0
解法 解法1 func reverse(x int) int { if x &amp;gt;= math.MaxInt32 || x &amp;lt;= math.MinInt32 { return 0 } i := 10 num := make([]int, 0) for { rem := x % i num = append(num, rem/(i/10)) if rem == x { break } i *= 10 } result := 0 for n, v := range num { result += v * int(math.</description>
    </item>
    
    <item>
      <title>LeetCode-0001-Two Sum</title>
      <link>https://liguoqinjim.com/post/leetcode/lab0001/</link>
      <pubDate>Thu, 19 Jul 2018 15:07:59 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/leetcode/lab0001/</guid>
      <description>题目 Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  解法 解法1 func twoSum(nums []int, target int) []int { as := make([]int, 2) for i := 0; i &amp;lt; len(nums); i++ { for j := i + 1; j &amp;lt; len(nums); j++ { if nums[i]+nums[j] == target { as[0] = i as[1] = j } } } return as } 解法2 func twoSum2(nums []int, target int) []int { r := make([]int, 2) result := make(map[int]int) //key是nums的值,value是值对应的下标 	for n, v := range nums { if value, ok := result[target-v]; ok { r[0] = value r[1] = n break } result[v] = n } return r } 总结 解法1就是最简单的循环相加，时间复杂度是O(n^2)。解法2的话因为题目里面是假设了肯定是有解的，那么就直接用一个循环来完成，时间复杂度使用O(n)</description>
    </item>
    
    <item>
      <title>Hugo的TOC</title>
      <link>https://liguoqinjim.com/post/markdown/hugo%E7%9A%84toc/</link>
      <pubDate>Wed, 04 Jul 2018 16:42:54 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/markdown/hugo%E7%9A%84toc/</guid>
      <description>&lt;p&gt;在hugo里面使用TOC显示目录。但是这个需要使用的主题是支持的。我现在使用的是&lt;code&gt;hugo-tranquilpeak-theme&lt;/code&gt;这个标题。在markdown里面加上&lt;code&gt;&amp;lt;!--toc--&amp;gt;&lt;/code&gt;就会在文章里面自动生成TOC了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设置markdown里面的图片大小</title>
      <link>https://liguoqinjim.com/post/markdown/%E8%AE%BE%E7%BD%AEmarkdown%E9%87%8C%E9%9D%A2%E7%9A%84%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Tue, 03 Jul 2018 14:12:17 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/markdown/%E8%AE%BE%E7%BD%AEmarkdown%E9%87%8C%E9%9D%A2%E7%9A%84%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F/</guid>
      <description>&lt;p&gt;在markdown里面添加图片的时候，图片显示出来可能会比我们需要的大很多。
这时候我们会需要设置图片的大小。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用golang触发IFTTT，发送自定义的Notifications</title>
      <link>https://liguoqinjim.com/post/tool/%E7%94%A8golang%E8%A7%A6%E5%8F%91ifttt%E5%8F%91%E9%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84notifications/</link>
      <pubDate>Mon, 02 Jul 2018 18:20:02 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/tool/%E7%94%A8golang%E8%A7%A6%E5%8F%91ifttt%E5%8F%91%E9%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84notifications/</guid>
      <description>&lt;p&gt;IFTTT众多的service里面，有一个非常强大的service，就是webhooks。当我们在IFTTT里面connect了这个service之后，我们会得到一个唯一的链接，我们访问这个链接就会被视作触发了这个service。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo的使用</title>
      <link>https://liguoqinjim.com/post/tool/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 27 Jan 2018 12:37:47 +0800</pubDate>
      
      <guid>https://liguoqinjim.com/post/tool/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>